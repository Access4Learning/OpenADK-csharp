// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.au.Common;

namespace OpenADK.Library.au.Learning{

/// <summary>A LearningResourcePackage</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 2.4</para>
/// </remarks>
[Serializable]
public class LearningResourcePackage : SifDataObject
{
	/// <summary>
	/// Creates an instance of a LearningResourcePackage
	/// </summary>
	public LearningResourcePackage() : base( Adk.SifVersion, LearningDTD.LEARNINGRESOURCEPACKAGE ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="refId">A RefId</param>
	///
	public LearningResourcePackage( string refId ) : base( Adk.SifVersion, LearningDTD.LEARNINGRESOURCEPACKAGE )
	{
		this.RefId = refId;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected LearningResourcePackage( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { LearningDTD.LEARNINGRESOURCEPACKAGE_REFID }; }
	}

	/// <summary>
	/// Gets or sets the value of the <c>RefId</c> attribute.
	/// </summary>
	/// <value> The <c>RefId</c> attribute of this object.</value>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public override string RefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( LearningDTD.LEARNINGRESOURCEPACKAGE_REFID ) ;
		}
		set
		{
			SetFieldValue( LearningDTD.LEARNINGRESOURCEPACKAGE_REFID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;XMLData&gt;</c> element.
	/// </summary>
	/// <value> A XMLData </value>
	/// <remarks>
	/// <para>To remove the <c>XMLData</c>, set <c>XMLData</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public XMLData XMLData
	{
		get
		{
			return (XMLData)GetChild( LearningDTD.LEARNINGRESOURCEPACKAGE_XMLDATA);
		}
		set
		{
			RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_XMLDATA);
			if( value != null)
			{
				AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_XMLDATA, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;TextData&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;TextData&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setTextData</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>TextData</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public void SetTextData( string Value ) {
		RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_TEXTDATA);
		AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_TEXTDATA, new TextData( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;TextData&gt;</c> element.
	/// </summary>
	/// <value> A TextData </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Contains arbitrary text, encoded in UTF-8."</para>
	/// <para>To remove the <c>TextData</c>, set <c>TextData</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public TextData TextData
	{
		get
		{
			return (TextData)GetChild( LearningDTD.LEARNINGRESOURCEPACKAGE_TEXTDATA);
		}
		set
		{
			RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_TEXTDATA);
			if( value != null)
			{
				AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_TEXTDATA, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;BinaryData&gt;</c> element.</summary>
	/// <param name="MimeType">Optional MIME type to specifically indicate the text type. Otherwise text/plain can be assumed.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;BinaryData&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setBinaryData</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>BinaryData</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public void SetBinaryData( string MimeType, string Value ) {
		RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_BINARYDATA);
		AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_BINARYDATA, new BinaryData( MimeType, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;BinaryData&gt;</c> element.
	/// </summary>
	/// <value> A BinaryData </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Contains the base64Binary encoding of binary or text data not encoded in UTF-8."</para>
	/// <para>To remove the <c>BinaryData</c>, set <c>BinaryData</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public BinaryData BinaryData
	{
		get
		{
			return (BinaryData)GetChild( LearningDTD.LEARNINGRESOURCEPACKAGE_BINARYDATA);
		}
		set
		{
			RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_BINARYDATA);
			if( value != null)
			{
				AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_BINARYDATA, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Reference&gt;</c> element.</summary>
	/// <param name="MimeType">MIME type to indicate the content type to be expected when retrieving the external content.</param>
	/// <param name="Url">Location of external content.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;Reference&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setReference</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Reference</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public void SetReference( string MimeType, string Url, string Value ) {
		RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_REFERENCE);
		AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_REFERENCE, new Reference( MimeType, Url, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Reference&gt;</c> element.
	/// </summary>
	/// <value> A Reference </value>
	/// <remarks>
	/// <para>To remove the <c>Reference</c>, set <c>Reference</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public Reference Reference
	{
		get
		{
			return (Reference)GetChild( LearningDTD.LEARNINGRESOURCEPACKAGE_REFERENCE);
		}
		set
		{
			RemoveChild( LearningDTD.LEARNINGRESOURCEPACKAGE_REFERENCE);
			if( value != null)
			{
				AddChild( LearningDTD.LEARNINGRESOURCEPACKAGE_REFERENCE, value );
			}
		}
	}

}}
