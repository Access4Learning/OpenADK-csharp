// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Student{

/// <summary>A DisciplineIncident</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 2.0</para>
/// </remarks>
[Serializable]
public class DisciplineIncident : SifDataObject
{
	/// <summary>
	/// Creates an instance of a DisciplineIncident
	/// </summary>
	public DisciplineIncident() : base( Adk.SifVersion, StudentDTD.DISCIPLINEINCIDENT ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="refId">The unique identifier (GUID) of this discipline incident.</param>
	///<param name="schoolYear">School year in which the incident occurred, and for which the information is applicable, expressed as the four-digit year in which the school year ends (e.g., "2007" for the 2006-07 school year).</param>
	///<param name="agencyReporting">An AgencyReporting</param>
	///<param name="incidentNumber">The locally-defined unique identifier (within the school or school district) to identify this specific incident or occurrence.</param>
	///<param name="incidentDate">The date when the incident occurred.</param>
	///<param name="incidentTime">The time when the incident occurred.</param>
	///<param name="incidentLocation">The locally-defined identifier or description of the location where the incident occurred.</param>
	///<param name="incidentCategory">An IncidentCategory</param>
	///<param name="offenderList">An OffenderList</param>
	///<param name="victimList">A VictimList</param>
	///
	public DisciplineIncident( string refId, int? schoolYear, AgencyReporting agencyReporting, string incidentNumber, DateTime? incidentDate, IncidentTime incidentTime, IncidentLocation incidentLocation, IncidentCategory incidentCategory, OffenderList offenderList, VictimList victimList ) : base( Adk.SifVersion, StudentDTD.DISCIPLINEINCIDENT )
	{
		this.RefId = refId;
		this.SchoolYear = schoolYear;
		this.AgencyReporting = agencyReporting;
		this.IncidentNumber = incidentNumber;
		this.IncidentDate = incidentDate;
		this.IncidentTime = incidentTime;
		this.IncidentLocation = incidentLocation;
		this.IncidentCategory = incidentCategory;
		this.OffenderList = offenderList;
		this.VictimList = victimList;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected DisciplineIncident( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { StudentDTD.DISCIPLINEINCIDENT_REFID }; }
	}

	/// <summary>
	/// Gets or sets the value of the <c>RefId</c> attribute.
	/// </summary>
	/// <value> The <c>RefId</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "The unique identifier (GUID) of this discipline incident."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public override string RefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_REFID ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_REFID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>SchoolYear</c> attribute.
	/// </summary>
	/// <value> The <c>SchoolYear</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "School year in which the incident occurred, and for which the information is applicable, expressed as the four-digit year in which the school year ends (e.g., "2007" for the 2006-07 school year)."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public int? SchoolYear
	{
		get
		{
			return (int?) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_SCHOOLYEAR ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_SCHOOLYEAR, new SifInt( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;AgencyReporting&gt;</c> element.</summary>
	/// <param name="SifRefObject">The name of the SIF object to which the GUID relates.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;AgencyReporting&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setAgencyReporting</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>AgencyReporting</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetAgencyReporting( AgencyReportingObject SifRefObject, string Value ) {
		RemoveChild( StudentDTD.DISCIPLINEINCIDENT_AGENCYREPORTING);
		AddChild( StudentDTD.DISCIPLINEINCIDENT_AGENCYREPORTING, new AgencyReporting( SifRefObject, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;AgencyReporting&gt;</c> element.
	/// </summary>
	/// <value> An AgencyReporting </value>
	/// <remarks>
	/// <para>To remove the <c>AgencyReporting</c>, set <c>AgencyReporting</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public AgencyReporting AgencyReporting
	{
		get
		{
			return (AgencyReporting)GetChild( StudentDTD.DISCIPLINEINCIDENT_AGENCYREPORTING);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_AGENCYREPORTING);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_AGENCYREPORTING, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentNumber&gt;</c> element.
	/// </summary>
	/// <value> The <c>IncidentNumber</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The locally-defined unique identifier (within the school or school district) to identify this specific incident or occurrence."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string IncidentNumber
	{
		get
		{
			return (string) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTNUMBER ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTNUMBER, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentDate&gt;</c> element.
	/// </summary>
	/// <value> The <c>IncidentDate</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The date when the incident occurred."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public DateTime? IncidentDate
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTDATE ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTDATE, new SifDate( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;IncidentTime&gt;</c> element.</summary>
	/// <param name="Type">Identifies whether or not the incident occurred during school hours. </param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;IncidentTime&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setIncidentTime</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>IncidentTime</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetIncidentTime( SafetyTimeType Type, string Value ) {
		RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTTIME);
		AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTTIME, new IncidentTime( Type, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentTime&gt;</c> element.
	/// </summary>
	/// <value> An IncidentTime </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The time when the incident occurred."</para>
	/// <para>To remove the <c>IncidentTime</c>, set <c>IncidentTime</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public IncidentTime IncidentTime
	{
		get
		{
			return (IncidentTime)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTTIME);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTTIME);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTTIME, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;IncidentLocation&gt;</c> element.</summary>
	/// <param name="Type">Identifies where the incident occurred.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;IncidentLocation&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setIncidentLocation</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>IncidentLocation</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetIncidentLocation( IncidentLocationType Type, string Value ) {
		RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATION);
		AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATION, new IncidentLocation( Type, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentLocation&gt;</c> element.
	/// </summary>
	/// <value> An IncidentLocation </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The locally-defined identifier or description of the location where the incident occurred."</para>
	/// <para>To remove the <c>IncidentLocation</c>, set <c>IncidentLocation</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public IncidentLocation IncidentLocation
	{
		get
		{
			return (IncidentLocation)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATION);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATION);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATION, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;IncidentLocationRefId&gt;</c> element.</summary>
	/// <param name="SifRefObject">The name of the SIF object to which the GUID relates.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;IncidentLocationRefId&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setIncidentLocationRefId</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>IncidentLocationRefId</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetIncidentLocationRefId( IncidentLocationObject SifRefObject, string Value ) {
		RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATIONREFID);
		AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATIONREFID, new IncidentLocationRefId( SifRefObject, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentLocationRefId&gt;</c> element.
	/// </summary>
	/// <value> An IncidentLocationRefId </value>
	/// <remarks>
	/// <para>To remove the <c>IncidentLocationRefId</c>, set <c>IncidentLocationRefId</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public IncidentLocationRefId IncidentLocationRefId
	{
		get
		{
			return (IncidentLocationRefId)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATIONREFID);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATIONREFID);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTLOCATIONREFID, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentCost&gt;</c> element.
	/// </summary>
	/// <value> The <c>IncidentCost</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "If the incident resulted in a quantifiable monetary loss for any entity involved, identify and record the value of that loss.  Cost may be reported by specific dollar amount or range."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string IncidentCost
	{
		get
		{
			return (string) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTCOST ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTCOST, new SifString( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;IncidentReporter&gt;</c> element.</summary>
	/// <param name="Type">A Type</param>
	///<remarks>
	/// <para>This form of <c>setIncidentReporter</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>IncidentReporter</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetIncidentReporter( ReporterDescriptionType Type ) {
		RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTREPORTER);
		AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTREPORTER, new IncidentReporter( Type ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentReporter&gt;</c> element.
	/// </summary>
	/// <value> An IncidentReporter </value>
	/// <remarks>
	/// <para>To remove the <c>IncidentReporter</c>, set <c>IncidentReporter</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public IncidentReporter IncidentReporter
	{
		get
		{
			return (IncidentReporter)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTREPORTER);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTREPORTER);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTREPORTER, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;RelatedToList&gt;</c> element.
	/// </summary>
	/// <value> A RelatedToList </value>
	/// <remarks>
	/// <para>To remove the <c>RelatedToList</c>, set <c>RelatedToList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public RelatedToList RelatedToList
	{
		get
		{
			return (RelatedToList)GetChild( StudentDTD.DISCIPLINEINCIDENT_RELATEDTOLIST);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_RELATEDTOLIST);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_RELATEDTOLIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;WeaponTypeList&gt;</c> element.
	/// </summary>
	/// <value> A WeaponTypeList </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "List of weapons involved in the incident. If the incident involves weapons, the element must have a value.
	///     Each weapon used in the incident is identified by a WeaponType entry. When multiple weapons of a single type are used, each weapon has a separate entry in this list.
	///     Weapons used by individual offenders are also reported in WeaponTypeList entries associated to the offender."</para>
	/// <para>To remove the <c>WeaponTypeList</c>, set <c>WeaponTypeList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public WeaponTypeList WeaponTypeList
	{
		get
		{
			return (WeaponTypeList)GetChild( StudentDTD.DISCIPLINEINCIDENT_WEAPONTYPELIST);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_WEAPONTYPELIST);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_WEAPONTYPELIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentCategory&gt;</c> element.
	/// </summary>
	/// <value> An IncidentCategory </value>
	/// <remarks>
	/// <para>To remove the <c>IncidentCategory</c>, set <c>IncidentCategory</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public IncidentCategory IncidentCategory
	{
		get
		{
			return (IncidentCategory)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTCATEGORY);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTCATEGORY);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTCATEGORY, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;OffenderList&gt;</c> element.
	/// </summary>
	/// <value> An OffenderList </value>
	/// <remarks>
	/// <para>To remove the <c>OffenderList</c>, set <c>OffenderList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public OffenderList OffenderList
	{
		get
		{
			return (OffenderList)GetChild( StudentDTD.DISCIPLINEINCIDENT_OFFENDERLIST);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_OFFENDERLIST);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_OFFENDERLIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;VictimList&gt;</c> element.
	/// </summary>
	/// <value> A VictimList </value>
	/// <remarks>
	/// <para>To remove the <c>VictimList</c>, set <c>VictimList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public VictimList VictimList
	{
		get
		{
			return (VictimList)GetChild( StudentDTD.DISCIPLINEINCIDENT_VICTIMLIST);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_VICTIMLIST);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_VICTIMLIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentDescription&gt;</c> element.
	/// </summary>
	/// <value> The <c>IncidentDescription</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "If the incident resulted in a quantifiable monetary loss for any entity involved, identify and record the value of that loss.  Cost may be reported by specific dollar amount or range."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public string IncidentDescription
	{
		get
		{
			return (string) GetSifSimpleFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTDESCRIPTION ) ;
		}
		set
		{
			SetFieldValue( StudentDTD.DISCIPLINEINCIDENT_INCIDENTDESCRIPTION, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;IncidentActionList&gt;</c> element.
	/// </summary>
	/// <value> An IncidentActionList </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "If the incident resulted in a quantifiable monetary loss for any entity involved, identify and record the value of that loss.  Cost may be reported by specific dollar amount or range."</para>
	/// <para>To remove the <c>IncidentActionList</c>, set <c>IncidentActionList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public IncidentActionList IncidentActionList
	{
		get
		{
			return (IncidentActionList)GetChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTACTIONLIST);
		}
		set
		{
			RemoveChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTACTIONLIST);
			if( value != null)
			{
				AddChild( StudentDTD.DISCIPLINEINCIDENT_INCIDENTACTIONLIST, value );
			}
		}
	}

}}
