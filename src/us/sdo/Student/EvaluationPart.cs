// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Student{

/// <summary>An EvaluationPart</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.6</para>
/// <para>Since: 2.6</para>
/// </remarks>
[Serializable]
public class EvaluationPart : SifElement
{
	/// <summary>
	/// Creates an instance of an EvaluationPart
	/// </summary>
	public EvaluationPart() : base ( StudentDTD.EVALUATIONPART ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="name">This is the name of a part that could receive a score.</param>
	///<param name="score">This is a subscore that is part of the evaluation.</param>
	///<param name="scale">This is the scale for the Subscore that is part of the evaluation.</param>
	///
	public EvaluationPart( NameEvaluation name, ScoreEvaluation score, ScaleEvaluation scale ) : base( StudentDTD.EVALUATIONPART )
	{
		this.AddName( name );
		this.Score = score;
		this.Scale = scale;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected EvaluationPart( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public  IElementDef[] KeyFields {
		get { return new IElementDef[] { StudentDTD.EVALUATIONPART_NAME, StudentDTD.EVALUATIONPART_SCORE, StudentDTD.EVALUATIONPART_SCALE }; }
	}

	/// <summary>Adds a new <c>&lt;Name&gt;</c> child element.</summary>
	/// <param name="val">A NameEvaluation object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "This is the name of a part that could receive a score."</para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void AddName( NameEvaluation val ) { 
		AddChild( StudentDTD.EVALUATIONPART_NAME, val );
	}

	///<summary>Adds the value of the <c>&lt;Name&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;NameEvaluation&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setName</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddName</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void AddName( string Value ) {
		AddChild( StudentDTD.EVALUATIONPART_NAME, new NameEvaluation( Value ) );
	}

	/// <summary>
	/// Removes a <see cref="NameEvaluation"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Value">Identifies the NameEvaluation object to remove by its Value value</param>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void RemoveName( string Value ) { 
		RemoveChild( StudentDTD.EVALUATIONPART_NAME, new String[] { Value.ToString() } );
	}

	/// <summary>
	/// Gets a <see cref="NameEvaluation"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Value">Identifies the NameEvaluation object to return by its "Value" attribute value</param>
	/// <returns>A NameEvaluation object</returns>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public NameEvaluation GetName( string Value ) { 
		return (NameEvaluation)GetChild( StudentDTD.EVALUATIONPART_NAME, new string[] { Value.ToString() } );
	}

	/// <summary>
	/// Gets all NameEvaluation object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of NameEvaluation objects</returns>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public NameEvaluation[] GetNames()
	{
		return GetChildren<NameEvaluation>().ToArray();
	}

	/// <summary>
	/// Sets all NameEvaluation object instances. All existing 
	/// <c>NameEvaluation</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>NameEvaluations</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void SetNames( NameEvaluation[] items)
	{
		SetChildren( StudentDTD.EVALUATIONPART_NAME, items );
	}

	///<summary>Sets the value of the <c>&lt;Score&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;ScoreEvaluation&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setScore</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Score</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void SetScore( string Value ) {
		RemoveChild( StudentDTD.EVALUATIONPART_SCORE);
		AddChild( StudentDTD.EVALUATIONPART_SCORE, new ScoreEvaluation( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Score&gt;</c> element.
	/// </summary>
	/// <value> A ScoreEvaluation </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "This is a subscore that is part of the evaluation."</para>
	/// <para>To remove the <c>ScoreEvaluation</c>, set <c>Score</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public ScoreEvaluation Score
	{
		get
		{
			return (ScoreEvaluation)GetChild( StudentDTD.EVALUATIONPART_SCORE);
		}
		set
		{
			RemoveChild( StudentDTD.EVALUATIONPART_SCORE);
			if( value != null)
			{
				AddChild( StudentDTD.EVALUATIONPART_SCORE, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Scale&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;ScaleEvaluation&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setScale</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Scale</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void SetScale( string Value ) {
		RemoveChild( StudentDTD.EVALUATIONPART_SCALE);
		AddChild( StudentDTD.EVALUATIONPART_SCALE, new ScaleEvaluation( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Scale&gt;</c> element.
	/// </summary>
	/// <value> A ScaleEvaluation </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "This is the scale for the Subscore that is part of the evaluation."</para>
	/// <para>To remove the <c>ScaleEvaluation</c>, set <c>Scale</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public ScaleEvaluation Scale
	{
		get
		{
			return (ScaleEvaluation)GetChild( StudentDTD.EVALUATIONPART_SCALE);
		}
		set
		{
			RemoveChild( StudentDTD.EVALUATIONPART_SCALE);
			if( value != null)
			{
				AddChild( StudentDTD.EVALUATIONPART_SCALE, value );
			}
		}
	}

}}
