// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Student{

/// <summary>An Offender</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 2.0</para>
/// </remarks>
[Serializable]
public class Offender : SifKeyedElement
{
	/// <summary>
	/// Creates an instance of an Offender
	/// </summary>
	public Offender() : base ( StudentDTD.OFFENDER ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="type">Identifies the type of offender involved in the incident.</param>
	///<param name="injury">Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor.</param>
	///
	public Offender( ReporterDescriptionType type, InjuryType injury ) : base( StudentDTD.OFFENDER )
	{
		this.SetType( type );
		this.SetInjury( injury );
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected Offender( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { StudentDTD.OFFENDER_TYPE }; }
	}

	/// <summary>
	/// Gets or sets the value of the <c>Type</c> attribute.
	/// </summary>
	/// <value> The <c>Type</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "Identifies the type of offender involved in the incident."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string Type
	{
		get
		{ 
			return GetFieldValue( StudentDTD.OFFENDER_TYPE );
		}
		set
		{
			SetField( StudentDTD.OFFENDER_TYPE, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>Type</c> attribute.
	/// </summary>
	/// <param name="val">A ReporterDescriptionType object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "Identifies the type of offender involved in the incident."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetType( ReporterDescriptionType val )
	{
		SetField( StudentDTD.OFFENDER_TYPE, val );
	}

	///<summary>Sets the value of the <c>&lt;Name&gt;</c> element.</summary>
	/// <param name="Type">Code that specifies what type of name this is.  If unsure, use 04.</param>
	/// <param name="LastName">The last name.</param>
	/// <param name="FirstName">The first name.</param>
	///<remarks>
	/// <para>This form of <c>setName</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Name</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetName( NameType Type, string LastName, string FirstName ) {
		RemoveChild( StudentDTD.OFFENDER_NAME);
		AddChild( StudentDTD.OFFENDER_NAME, new Name( Type, LastName, FirstName ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Name&gt;</c> element.
	/// </summary>
	/// <value> A Name </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The name of the offender."</para>
	/// <para>To remove the <c>Name</c>, set <c>Name</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public Name Name
	{
		get
		{
			return (Name)GetChild( StudentDTD.OFFENDER_NAME);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_NAME);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_NAME, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;SIF_RefId&gt;</c> element.</summary>
	/// <param name="SifRefObject">A SIF_RefObject</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;SIF_RefId&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setSIF_RefId</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>SIF_RefId</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetSIF_RefId( string SifRefObject, string Value ) {
		RemoveChild( StudentDTD.OFFENDER_SIF_REFID);
		AddChild( StudentDTD.OFFENDER_SIF_REFID, new SIF_RefId( SifRefObject, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SIF_RefId&gt;</c> element.
	/// </summary>
	/// <value> A SIF_RefId </value>
	/// <remarks>
	/// <para>To remove the <c>SIF_RefId</c>, set <c>SIF_RefId</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public SIF_RefId SIF_RefId
	{
		get
		{
			return (SIF_RefId)GetChild( StudentDTD.OFFENDER_SIF_REFID);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_SIF_REFID);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_SIF_REFID, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Injury&gt;</c> element.
	/// </summary>
	/// <value> The <c>Injury</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string Injury
	{
		get
		{ 
			return GetFieldValue( StudentDTD.OFFENDER_INJURY );
		}
		set
		{
			SetField( StudentDTD.OFFENDER_INJURY, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>&lt;Injury&gt;</c> element.
	/// </summary>
	/// <param name="val">A InjuryType object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetInjury( InjuryType val )
	{
		SetField( StudentDTD.OFFENDER_INJURY, val );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;ManifestationDetermination&gt;</c> element.
	/// </summary>
	/// <value> A ManifestationDetermination </value>
	/// <remarks>
	/// <para>To remove the <c>ManifestationDetermination</c>, set <c>ManifestationDetermination</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public ManifestationDetermination ManifestationDetermination
	{
		get
		{
			return (ManifestationDetermination)GetChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;ActionList&gt;</c> element.
	/// </summary>
	/// <value> An ActionList </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "List of actions taken.
	///     Note: There is also a SIF type called ActionList. It is one of two types of lists. Do not confuse this element with the SIF type called ActionList. This problem will be resolved in the next major release."</para>
	/// <para>To remove the <c>ActionList</c>, set <c>ActionList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public ActionList ActionList
	{
		get
		{
			return (ActionList)GetChild( StudentDTD.OFFENDER_ACTIONLIST);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_ACTIONLIST);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_ACTIONLIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;WeaponTypeList&gt;</c> element.
	/// </summary>
	/// <value> A WeaponTypeList </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "List of weapons involved in the incident used by the offender. If the incident involves weapons, the element must have a value.
	/// Each weapon used by the offender is identified by a WeaponType entry. When multiple weapons of a single type are used by the offender, each weapon has a separate entry in this list.
	/// (Note: All weapons used in the incident are reported in WeaponTypeList entries for the incident, including those weapons related to this offender.)"</para>
	/// <para>To remove the <c>WeaponTypeList</c>, set <c>WeaponTypeList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public WeaponTypeList WeaponTypeList
	{
		get
		{
			return (WeaponTypeList)GetChild( StudentDTD.OFFENDER_WEAPONTYPELIST);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_WEAPONTYPELIST);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_WEAPONTYPELIST, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;RelatedToList&gt;</c> element.
	/// </summary>
	/// <value> A RelatedToList </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "List of categories to which the offenderâ€™s incident is related."</para>
	/// <para>To remove the <c>RelatedToList</c>, set <c>RelatedToList</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.4</para>
	/// </remarks>
	public RelatedToList RelatedToList
	{
		get
		{
			return (RelatedToList)GetChild( StudentDTD.OFFENDER_RELATEDTOLIST);
		}
		set
		{
			RemoveChild( StudentDTD.OFFENDER_RELATEDTOLIST);
			if( value != null)
			{
				AddChild( StudentDTD.OFFENDER_RELATEDTOLIST, value );
			}
		}
	}

}}
