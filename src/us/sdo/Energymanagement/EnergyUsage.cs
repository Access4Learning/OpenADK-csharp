// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Energymanagement{

/// <summary>This object contains energy usage information for an energy location.</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.6</para>
/// <para>Since: 2.6</para>
/// </remarks>
[Serializable]
public class EnergyUsage : SifDataObject
{
	/// <summary>
	/// Creates an instance of an EnergyUsage
	/// </summary>
	public EnergyUsage() : base( Adk.SifVersion, EnergymanagementDTD.ENERGYUSAGE ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="usageLocationInfo">Complex element containing the location of where measurements apply to.</param>
	///
	public EnergyUsage( UsageLocationInfo usageLocationInfo ) : base( Adk.SifVersion, EnergymanagementDTD.ENERGYUSAGE )
	{
		this.UsageLocationInfo = usageLocationInfo;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected EnergyUsage( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO }; }
	}

	///<summary>Sets the value of the <c>&lt;UsageLocationInfo&gt;</c> element.</summary>
	/// <param name="SchoolId">"e.g., urn:sif:school:AcmeMiddleSchool1.CoyoteDistrict.Arizona.
	///                    e.g., urn:sif:school:AcmeMiddleSchool1.CoyoteDistrict.Arizona."</param>
	/// <param name="Building">Name of the School Building.</param>
	///<remarks>
	/// <para>This form of <c>setUsageLocationInfo</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>UsageLocationInfo</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void SetUsageLocationInfo( BinaryData SchoolId, string Building ) {
		RemoveChild( EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO);
		AddChild( EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO, new UsageLocationInfo( SchoolId, Building ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;UsageLocationInfo&gt;</c> element.
	/// </summary>
	/// <value> An UsageLocationInfo </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Complex element containing the location of where measurements apply to."</para>
	/// <para>To remove the <c>UsageLocationInfo</c>, set <c>UsageLocationInfo</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public UsageLocationInfo UsageLocationInfo
	{
		get
		{
			return (UsageLocationInfo)GetChild( EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO);
		}
		set
		{
			RemoveChild( EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO);
			if( value != null)
			{
				AddChild( EnergymanagementDTD.ENERGYUSAGE_USAGELOCATIONINFO, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;DataSource&gt;</c> element.</summary>
	/// <param name="System">Identifier of the reporting system.</param>
	/// <param name="StartTime">Start time of measurements that follow.</param>
	/// <param name="ReadingDataList">List of ReadingData</param>
	///<remarks>
	/// <para>This form of <c>setDataSource</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>DataSource</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public void SetDataSource( string System, DateTime? StartTime, ReadingData ReadingDataList ) {
		RemoveChild( EnergymanagementDTD.ENERGYUSAGE_DATASOURCE);
		AddChild( EnergymanagementDTD.ENERGYUSAGE_DATASOURCE, new DataSource( System, StartTime, ReadingDataList ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;DataSource&gt;</c> element.
	/// </summary>
	/// <value> A DataSource </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The description of the source of the measurements."</para>
	/// <para>To remove the <c>DataSource</c>, set <c>DataSource</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.6</para>
	/// </remarks>
	public DataSource DataSource
	{
		get
		{
			return (DataSource)GetChild( EnergymanagementDTD.ENERGYUSAGE_DATASOURCE);
		}
		set
		{
			RemoveChild( EnergymanagementDTD.ENERGYUSAGE_DATASOURCE);
			if( value != null)
			{
				AddChild( EnergymanagementDTD.ENERGYUSAGE_DATASOURCE, value );
			}
		}
	}

}}
