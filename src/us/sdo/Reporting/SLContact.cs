// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;
using OpenADK.Library.Infra;

namespace OpenADK.Library.us.Reporting{

/// <summary>Typically used to provide the state information about a student's parents and legal guardians.</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 1.5r1</para>
/// </remarks>
[Serializable]
public class SLContact : SifKeyedElement
{
	/// <summary>
	/// Creates an instance of a SLContact
	/// </summary>
	public SLContact() : base ( ReportingDTD.SLCONTACT ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="relationship">Relationship to the student.</param>
	///
	public SLContact( Relationship relationship ) : base( ReportingDTD.SLCONTACT )
	{
		this.Relationship = relationship;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected SLContact( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { ReportingDTD.SLCONTACT_RELATIONSHIP }; }
	}

	///<summary>Sets the value of the <c>&lt;Relationship&gt;</c> element.</summary>
	/// <param name="Code">Code representing the relationship.</param>
	///<remarks>
	/// <para>This form of <c>setRelationship</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Relationship</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetRelationship( RelationshipCode Code ) {
		RemoveChild( ReportingDTD.SLCONTACT_RELATIONSHIP);
		AddChild( ReportingDTD.SLCONTACT_RELATIONSHIP, new Relationship( Code ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Relationship&gt;</c> element.
	/// </summary>
	/// <value> A Relationship </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Relationship to the student."</para>
	/// <para>To remove the <c>Relationship</c>, set <c>Relationship</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Relationship Relationship
	{
		get
		{
			return (Relationship)GetChild( ReportingDTD.SLCONTACT_RELATIONSHIP);
		}
		set
		{
			RemoveChild( ReportingDTD.SLCONTACT_RELATIONSHIP);
			if( value != null)
			{
				AddChild( ReportingDTD.SLCONTACT_RELATIONSHIP, value );
			}
		}
	}

	/// <summary>Adds a new <c>&lt;Name&gt;</c> child element.</summary>
	/// <param name="val">A Name object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The name(s) of the contact."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddName( Name val ) { 
		AddChild( ReportingDTD.SLCONTACT_NAME, val );
	}

	///<summary>Adds the value of the <c>&lt;Name&gt;</c> element.</summary>
	/// <param name="Type">Code that specifies what type of name this is.  If unsure, use 04.</param>
	/// <param name="LastName">The last name.</param>
	/// <param name="FirstName">The first name.</param>
	///<remarks>
	/// <para>This form of <c>setName</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddName</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddName( NameType Type, string LastName, string FirstName ) {
		AddChild( ReportingDTD.SLCONTACT_NAME, new Name( Type, LastName, FirstName ) );
	}

	/// <summary>
	/// Removes a <see cref="Name"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Name object to remove by its Type value</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void RemoveName( NameType Type ) { 
		RemoveChild( ReportingDTD.SLCONTACT_NAME, new String[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets a <see cref="Name"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Name object to return by its "Type" attribute value</param>
	/// <returns>A Name object</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Name GetName( NameType Type ) { 
		return (Name)GetChild( ReportingDTD.SLCONTACT_NAME, new string[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets all Name object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of Name objects</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Name[] GetNames()
	{
		return GetChildren<Name>().ToArray();
	}

	/// <summary>
	/// Sets all Name object instances. All existing 
	/// <c>Name</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>Names</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetNames( Name[] items)
	{
		SetChildren( ReportingDTD.SLCONTACT_NAME, items );
	}

	///<summary>Sets the value of the <c>&lt;OtherId&gt;</c> element.</summary>
	/// <param name="Type">Code that defines the type of this other ID.  Note: A subset of valid values may be specified in data objects.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;OtherId&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setOtherId</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>OtherId</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetOtherId( OtherIdType Type, string Value ) {
		RemoveChild( ReportingDTD.SLCONTACT_OTHERID);
		AddChild( ReportingDTD.SLCONTACT_OTHERID, new OtherId( Type, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;OtherId&gt;</c> element.
	/// </summary>
	/// <value> An OtherId </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The ID(s) of the contact."</para>
	/// <para>To remove the <c>OtherId</c>, set <c>OtherId</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public OtherId OtherId
	{
		get
		{
			return (OtherId)GetChild( ReportingDTD.SLCONTACT_OTHERID);
		}
		set
		{
			RemoveChild( ReportingDTD.SLCONTACT_OTHERID);
			if( value != null)
			{
				AddChild( ReportingDTD.SLCONTACT_OTHERID, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;EducationalLevel&gt;</c> element.
	/// </summary>
	/// <value> The <c>EducationalLevel</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Highest level of education completed by the contact."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string EducationalLevel
	{
		get
		{ 
			return GetFieldValue( ReportingDTD.SLCONTACT_EDUCATIONALLEVEL );
		}
		set
		{
			SetField( ReportingDTD.SLCONTACT_EDUCATIONALLEVEL, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>&lt;EducationalLevel&gt;</c> element.
	/// </summary>
	/// <param name="val">A EducationalLevelCode object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Highest level of education completed by the contact."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetEducationalLevel( EducationalLevelCode val )
	{
		SetField( ReportingDTD.SLCONTACT_EDUCATIONALLEVEL, val );
	}

}}
