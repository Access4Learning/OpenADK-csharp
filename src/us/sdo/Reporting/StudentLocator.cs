// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;
using OpenADK.Library.Infra;

namespace OpenADK.Library.us.Reporting{

/// <summary>It is anticipated that the StudentLocator object will be removed from the next major version of this specification. (As of 2.4) An example SIF object that serves as a template for matching objects.  There is an implied EQ operator
	/// for every element/attribute value present and an implied And group of all resulting conditions.  Currently
	/// this is an experimental feature and limited to use with StudentLocator; wider use may be considered in future
	/// major versions of this specification.</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 1.5r1</para>
/// </remarks>
[Serializable]
public class StudentLocator : SifDataObject
{
	/// <summary>
	/// Creates an instance of a StudentLocator
	/// </summary>
	public StudentLocator() : base( Adk.SifVersion, ReportingDTD.STUDENTLOCATOR ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="idStatus">Communicates the orchestration status for the object.</param>
	///<param name="stateProvinceId">This is the student's state-assigned ID. May be empty in a response where IdStatus is "Ambiguous."</param>
	///<param name="transactionId">GUID that allows requesters and responders to refer to the same logical StudentLocator "transaction" over more than one
	/// SIF_Request/SIF_Response exchange.</param>
	///
	public StudentLocator( IdStatus idStatus, string stateProvinceId, string transactionId ) : base( Adk.SifVersion, ReportingDTD.STUDENTLOCATOR )
	{
		this.SetIdStatus( idStatus );
		this.StateProvinceId = stateProvinceId;
		this.TransactionId = transactionId;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected StudentLocator( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets or sets the value of the <c>IdStatus</c> attribute.
	/// </summary>
	/// <value> The <c>IdStatus</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "Communicates the orchestration status for the object."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string IdStatus
	{
		get
		{ 
			return GetFieldValue( ReportingDTD.STUDENTLOCATOR_IDSTATUS );
		}
		set
		{
			SetField( ReportingDTD.STUDENTLOCATOR_IDSTATUS, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>IdStatus</c> attribute.
	/// </summary>
	/// <param name="val">A IdStatus object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "Communicates the orchestration status for the object."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetIdStatus( IdStatus val )
	{
		SetField( ReportingDTD.STUDENTLOCATOR_IDSTATUS, val );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;StateProvinceId&gt;</c> element.
	/// </summary>
	/// <value> The <c>StateProvinceId</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "This is the student's state-assigned ID. May be empty in a response where IdStatus is "Ambiguous.""</para>
	/// <para>This element is known by more than one tag name depending on the version of SIF in use. 
	/// The ADK will use the tag names shown below when parsing and rendering elements of this kind.</para>
	/// <list type="table"><listheader><term>Version</term><description>Tag</description></listheader>;
	/// <item><term>2.0 (and greater)</term><description>&lt;StateProvinceId&gt;</description></item>
	/// </list>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string StateProvinceId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STATEPROVINCEID ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_STATEPROVINCEID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>TransactionId</c> attribute.
	/// </summary>
	/// <value> The <c>TransactionId</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "GUID that allows requesters and responders to refer to the same logical StudentLocator "transaction" over more than one
	/// SIF_Request/SIF_Response exchange."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string TransactionId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_TRANSACTIONID ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_TRANSACTIONID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Confidence&gt;</c> element.
	/// </summary>
	/// <value> The <c>Confidence</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Confidence score. The main use of this element is when IdStatus equals "Ambiguous" and the state returns one or more* candidate matches. The interpretation is that the information populated in each returned object matches the information in the request to the extent expressed in this score. The matching/scoring algorithms (and resultant values) are defined by the particular state."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string Confidence
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_CONFIDENCE ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_CONFIDENCE, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;LocalId&gt;</c> element.
	/// </summary>
	/// <value> The <c>LocalId</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "This is the requesting agency's unique ID for the student."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string LocalId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_LOCALID ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_LOCALID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;StudentPersonalRefId&gt;</c> element.
	/// </summary>
	/// <value> The <c>StudentPersonalRefId</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Requesting agency's local zone GUID of the student's StudentPersonal object."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string StudentPersonalRefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STUDENTPERSONALREFID ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_STUDENTPERSONALREFID, new SifString( value ), value );
		}
	}

	/// <summary>Adds a new <c>&lt;RequestingAgencyId&gt;</c> child element.</summary>
	/// <param name="val">A RequestingAgencyId object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Identification of the agency and/or location requesting the state ID. Optional because the SIF Zone infrastructure may provide adequate information for the state to ascertain the origin of the request."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddRequestingAgencyId( RequestingAgencyId val ) { 
		AddChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, val );
	}

	///<summary>Adds the value of the <c>&lt;RequestingAgencyId&gt;</c> element.</summary>
	/// <param name="Type">The functional level of the requesting agency.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;RequestingAgencyId&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setRequestingAgencyId</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddRequestingAgencyId</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddRequestingAgencyId( RequestingAgencyIdType Type, string Value ) {
		AddChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new RequestingAgencyId( Type, Value ) );
	}

	/// <summary>
	/// Removes a <see cref="RequestingAgencyId"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the RequestingAgencyId object to remove by its Type value</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void RemoveRequestingAgencyId( RequestingAgencyIdType Type ) { 
		RemoveChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new String[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets a <see cref="RequestingAgencyId"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the RequestingAgencyId object to return by its "Type" attribute value</param>
	/// <returns>A RequestingAgencyId object</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public RequestingAgencyId GetRequestingAgencyId( RequestingAgencyIdType Type ) { 
		return (RequestingAgencyId)GetChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new string[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets all RequestingAgencyId object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of RequestingAgencyId objects</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public RequestingAgencyId[] GetRequestingAgencyIds()
	{
		return GetChildren<RequestingAgencyId>().ToArray();
	}

	/// <summary>
	/// Sets all RequestingAgencyId object instances. All existing 
	/// <c>RequestingAgencyId</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>RequestingAgencyIds</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetRequestingAgencyIds( RequestingAgencyId[] items)
	{
		SetChildren( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, items );
	}

	///<summary>Sets the value of the <c>&lt;GradeLevel&gt;</c> element.</summary>
	/// <param name="Code">Code representing the grade level.</param>
	///<remarks>
	/// <para>This form of <c>setGradeLevel</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>GradeLevel</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetGradeLevel( GradeLevelCode Code ) {
		RemoveChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL);
		AddChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL, new GradeLevel( Code ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;GradeLevel&gt;</c> element.
	/// </summary>
	/// <value> A GradeLevel </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The student's current grade level."</para>
	/// <para>To remove the <c>GradeLevel</c>, set <c>GradeLevel</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public GradeLevel GradeLevel
	{
		get
		{
			return (GradeLevel)GetChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL);
		}
		set
		{
			RemoveChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL);
			if( value != null)
			{
				AddChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SSN&gt;</c> element.
	/// </summary>
	/// <value> The <c>SSN</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Social security number of the student."</para>
	/// <para>This element is known by more than one tag name depending on the version of SIF in use. 
	/// The ADK will use the tag names shown below when parsing and rendering elements of this kind.</para>
	/// <list type="table"><listheader><term>Version</term><description>Tag</description></listheader>;
	/// <item><term>2.0 (and greater)</term><description>&lt;SSN&gt;</description></item>
	/// </list>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string SSN
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SSN ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_SSN, new SifString( value ), value );
		}
	}

	/// <summary>Adds a new <c>&lt;Name&gt;</c> child element.</summary>
	/// <param name="val">A Name object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The name(s) of the student."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddName( Name val ) { 
		AddChild( ReportingDTD.STUDENTLOCATOR_NAME, val );
	}

	///<summary>Adds the value of the <c>&lt;Name&gt;</c> element.</summary>
	/// <param name="Type">Code that specifies what type of name this is.  If unsure, use 04.</param>
	/// <param name="LastName">The last name.</param>
	/// <param name="FirstName">The first name.</param>
	///<remarks>
	/// <para>This form of <c>setName</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddName</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddName( NameType Type, string LastName, string FirstName ) {
		AddChild( ReportingDTD.STUDENTLOCATOR_NAME, new Name( Type, LastName, FirstName ) );
	}

	/// <summary>
	/// Removes a <see cref="Name"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Name object to remove by its Type value</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void RemoveName( NameType Type ) { 
		RemoveChild( ReportingDTD.STUDENTLOCATOR_NAME, new String[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets a <see cref="Name"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Name object to return by its "Type" attribute value</param>
	/// <returns>A Name object</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Name GetName( NameType Type ) { 
		return (Name)GetChild( ReportingDTD.STUDENTLOCATOR_NAME, new string[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets all Name object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of Name objects</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Name[] GetNames()
	{
		return GetChildren<Name>().ToArray();
	}

	/// <summary>
	/// Sets all Name object instances. All existing 
	/// <c>Name</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>Names</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetNames( Name[] items)
	{
		SetChildren( ReportingDTD.STUDENTLOCATOR_NAME, items );
	}

	/// <summary>Adds a new <c>&lt;Address&gt;</c> child element.</summary>
	/// <param name="val">A Address object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The address(es) of the student."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddAddress( Address val ) { 
		AddChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, val );
	}

	///<summary>Adds the value of the <c>&lt;Address&gt;</c> element.</summary>
	/// <param name="Type">Code that defines the location of the address.  Note:  A subset of specific valid values for each instance in a data object may be listed in that object.</param>
	/// <param name="Street">The street part of the address</param>
	/// <param name="City">The city part of the address.</param>
	/// <param name="StateProvince">The state or province code.</param>
	/// <param name="Country">The country code.</param>
	/// <param name="PostalCode">The ZIP/postal code.</param>
	///<remarks>
	/// <para>This form of <c>setAddress</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddAddress</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddAddress( AddressType Type, Street Street, string City, StatePrCode StateProvince, CountryCode Country, string PostalCode ) {
		AddChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new Address( Type, Street, City, StateProvince, Country, PostalCode ) );
	}

	/// <summary>
	/// Removes an <see cref="Address"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Address object to remove by its Type value</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void RemoveAddress( AddressType Type ) { 
		RemoveChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new String[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets an <see cref="Address"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Type">Identifies the Address object to return by its "Type" attribute value</param>
	/// <returns>An Address object</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Address GetAddress( AddressType Type ) { 
		return (Address)GetChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new string[] { Type.ToString() } );
	}

	/// <summary>
	/// Gets all Address object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of Address objects</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Address[] GetAddresses()
	{
		return GetChildren<Address>().ToArray();
	}

	/// <summary>
	/// Sets all Address object instances. All existing 
	/// <c>Address</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>Addresses</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetAddresses( Address[] items)
	{
		SetChildren( ReportingDTD.STUDENTLOCATOR_ADDRESS, items );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Demographics&gt;</c> element.
	/// </summary>
	/// <value> A Demographics </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Demographic information about the student. This will typically be the core matching information. Privacy considerations may mean that it is filled differently here than it might be in a local StudentPersonal, but it must include enough to drive the state's matching algorithms."</para>
	/// <para>To remove the <c>Demographics</c>, set <c>Demographics</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Demographics Demographics
	{
		get
		{
			return (Demographics)GetChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS);
		}
		set
		{
			RemoveChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS);
			if( value != null)
			{
				AddChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS, value );
			}
		}
	}

	/// <summary>Adds a new <c>&lt;Contact&gt;</c> child element.</summary>
	/// <param name="val">A SLContact object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Typically used to provide the state information about a student's parents and legal guardians."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddContact( SLContact val ) { 
		AddChild( ReportingDTD.STUDENTLOCATOR_CONTACT, val );
	}

	///<summary>Adds the value of the <c>&lt;Contact&gt;</c> element.</summary>
	/// <param name="Relationship">Relationship to the student.</param>
	///<remarks>
	/// <para>This form of <c>setContact</c> is provided as a convenience method
	/// that is functionally equivalent to the method <c>AddContact</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void AddContact( Relationship Relationship ) {
		AddChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new SLContact( Relationship ) );
	}

	/// <summary>
	/// Removes a <see cref="SLContact"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Relationship">Identifies the SLContact object to remove by its Relationship value</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void RemoveContact( Relationship Relationship ) { 
		RemoveChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new String[] { Relationship.ToString() } );
	}

	/// <summary>
	/// Gets a <see cref="SLContact"/> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <param name="Relationship">Identifies the SLContact object to return by its "Relationship" attribute value</param>
	/// <returns>A SLContact object</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public SLContact GetContact( Relationship Relationship ) { 
		return (SLContact)GetChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new string[] { Relationship.ToString() } );
	}

	/// <summary>
	/// Gets all SLContact object instances. More than once instance can be defined for this object because it is a repeatable field element.
	/// </summary>
	/// <returns>An array of SLContact objects</returns>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public SLContact[] GetContacts()
	{
		return GetChildren<SLContact>().ToArray();
	}

	/// <summary>
	/// Sets all SLContact object instances. All existing 
	/// <c>SLContact</c> instances 
	/// are removed and replaced with this list. Calling this method with the 
	/// parameter value set to null removes all <c>SLContacts</c>.
	/// </summary>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetContacts( SLContact[] items)
	{
		SetChildren( ReportingDTD.STUDENTLOCATOR_CONTACT, items );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;EffectiveDate&gt;</c> element.
	/// </summary>
	/// <value> The <c>EffectiveDate</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "For Requests, this should match StudentSchoolEnrollment/EntryDate."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public DateTime? EffectiveDate
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_EFFECTIVEDATE ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_EFFECTIVEDATE, new SifDate( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;StartDate&gt;</c> element.
	/// </summary>
	/// <value> The <c>StartDate</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public DateTime? StartDate
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STARTDATE ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_STARTDATE, new SifDate( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;EndDate&gt;</c> element.
	/// </summary>
	/// <value> The <c>EndDate</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public DateTime? EndDate
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_ENDDATE ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_ENDDATE, new SifDate( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;GraduationDate&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;PartialDateType&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setGraduationDate</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>GraduationDate</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetGraduationDate( string Value ) {
		RemoveChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE);
		AddChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE, new PartialDateType( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;GraduationDate&gt;</c> element.
	/// </summary>
	/// <value> A PartialDateType </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Indicates the date the student graduated--GradYear, GradYear and GradMonth, or GradYear, GradMonth and GradDay may be specified.  
	/// Intended to facilitate locating students that may not be currently enrolled
	/// in a school or district, particularly in the context of locating student identifiers for initiating a request for a student's academic record.  
	/// Supplied date values may often be approximations made by the entity endeavoring to request a student's academic record."</para>
	/// <para>To remove the <c>PartialDateType</c>, set <c>GraduationDate</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public PartialDateType GraduationDate
	{
		get
		{
			return (PartialDateType)GetChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE);
		}
		set
		{
			RemoveChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE);
			if( value != null)
			{
				AddChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SchoolAttendedName&gt;</c> element.
	/// </summary>
	/// <value> The <c>SchoolAttendedName</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The name of the school last attended by the student."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string SchoolAttendedName
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDNAME ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDNAME, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SchoolAttendedLocation&gt;</c> element.
	/// </summary>
	/// <value> The <c>SchoolAttendedLocation</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The location of the school last attended by the student (e.g. city or county name, district name, etc.)."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string SchoolAttendedLocation
	{
		get
		{
			return (string) GetSifSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDLOCATION ) ;
		}
		set
		{
			SetFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDLOCATION, new SifString( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;OtherId&gt;</c> element.</summary>
	/// <param name="Type">Code that defines the type of this other ID.  Note: A subset of valid values may be specified in data objects.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;OtherId&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setOtherId</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>OtherId</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetOtherId( OtherIdType Type, string Value ) {
		RemoveChild( ReportingDTD.STUDENTLOCATOR_OTHERID);
		AddChild( ReportingDTD.STUDENTLOCATOR_OTHERID, new OtherId( Type, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;OtherId&gt;</c> element.
	/// </summary>
	/// <value> An OtherId </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Additional student identifier not represented elsewhere in StudentLocator (e.g. the driver's license number of the student)."</para>
	/// <para>To remove the <c>OtherId</c>, set <c>OtherId</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public OtherId OtherId
	{
		get
		{
			return (OtherId)GetChild( ReportingDTD.STUDENTLOCATOR_OTHERID);
		}
		set
		{
			RemoveChild( ReportingDTD.STUDENTLOCATOR_OTHERID);
			if( value != null)
			{
				AddChild( ReportingDTD.STUDENTLOCATOR_OTHERID, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;SIF_Error&gt;</c> element.</summary>
	/// <param name="SifCategory">A SIF_Category</param>
	/// <param name="SifCode">See Error Codes.</param>
	/// <param name="SifDesc">A simple, easy to understand, description of the error. The primary consumer of this message is the application user. Example: "Unable to open database."</param>
	///<remarks>
	/// <para>This form of <c>setSIF_Error</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>SIF_Error</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetSIF_Error( int? SifCategory, int? SifCode, string SifDesc ) {
		RemoveChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR);
		AddChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR, new SIF_Error( SifCategory, SifCode, SifDesc ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SIF_Error&gt;</c> element.
	/// </summary>
	/// <value> A SIF_Error </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "When IdStatus is set to Error, this element provides details about the error.  Rather than the specification
	/// defining a list of possible error categories and codes for StudentLocator transactions, the SIF_Category and SIF_Code elements may contain
	/// values defined by the application that is responding to the StudentLocator request.  It is recommended the requester convey these values
	/// in log files or error reports, along with the SIF_Desc and optional SIF_ExtendedDesc elements."</para>
	/// <para>To remove the <c>SIF_Error</c>, set <c>SIF_Error</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public SIF_Error SIF_Error
	{
		get
		{
			return (SIF_Error)GetChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR);
		}
		set
		{
			RemoveChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR);
			if( value != null)
			{
				AddChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR, value );
			}
		}
	}

}}
