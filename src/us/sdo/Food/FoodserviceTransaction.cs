// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Food{

/// <summary>This object communicates food service transaction information. This is the key object that will be present for every food service transaction.  SIF_Events are reported.</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 1.5r1</para>
/// </remarks>
[Serializable]
public class FoodserviceTransaction : SifDataObject
{
	/// <summary>
	/// Creates an instance of a FoodserviceTransaction
	/// </summary>
	public FoodserviceTransaction() : base( Adk.SifVersion, FoodDTD.FOODSERVICETRANSACTION ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="refId">GUID that identifies food service transaction</param>
	///<param name="schoolInfoRefId">GUID that identifies the school/site of account transaction</param>
	///<param name="program">Program. For a description of this element, see 5.1.23 Program.</param>
	///<param name="transactionDate">Date of transaction</param>
	///<param name="transactionTime">Time of transaction.</param>
	///<param name="customer">The customer doing the transaction. The customer can be student, staff or any other person.</param>
	///<param name="fsAmount">Amount.</param>
	///<param name="voided">This flag tells us if the transaction is voided.</param>
	///
	public FoodserviceTransaction( string refId, string schoolInfoRefId, Program program, DateTime? transactionDate, DateTime? transactionTime, Customer customer, FSAmount fsAmount, YesNo voided ) : base( Adk.SifVersion, FoodDTD.FOODSERVICETRANSACTION )
	{
		this.RefId = refId;
		this.SchoolInfoRefId = schoolInfoRefId;
		this.Program = program;
		this.TransactionDate = transactionDate;
		this.TransactionTime = transactionTime;
		this.Customer = customer;
		this.FSAmount = fsAmount;
		this.SetVoided( voided );
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected FoodserviceTransaction( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { FoodDTD.FOODSERVICETRANSACTION_REFID }; }
	}

	/// <summary>
	/// Gets or sets the value of the <c>RefId</c> attribute.
	/// </summary>
	/// <value> The <c>RefId</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "GUID that identifies food service transaction"</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public override string RefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( FoodDTD.FOODSERVICETRANSACTION_REFID ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.FOODSERVICETRANSACTION_REFID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;SchoolInfoRefId&gt;</c> element.
	/// </summary>
	/// <value> The <c>SchoolInfoRefId</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "GUID that identifies the school/site of account transaction"</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string SchoolInfoRefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( FoodDTD.FOODSERVICETRANSACTION_SCHOOLINFOREFID ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.FOODSERVICETRANSACTION_SCHOOLINFOREFID, new SifString( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;Program&gt;</c> element.</summary>
	/// <param name="Type">The type of the program. Type identifies the list of values.</param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;Program&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setProgram</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Program</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetProgram( FinancialProgram Type, string Value ) {
		RemoveChild( FoodDTD.FOODSERVICETRANSACTION_PROGRAM);
		AddChild( FoodDTD.FOODSERVICETRANSACTION_PROGRAM, new Program( Type, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Program&gt;</c> element.
	/// </summary>
	/// <value> A Program </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Program. For a description of this element, see 5.1.23 Program."</para>
	/// <para>To remove the <c>Program</c>, set <c>Program</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Program Program
	{
		get
		{
			return (Program)GetChild( FoodDTD.FOODSERVICETRANSACTION_PROGRAM);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_PROGRAM);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_PROGRAM, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;TransactionDate&gt;</c> element.
	/// </summary>
	/// <value> The <c>TransactionDate</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Date of transaction"</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public DateTime? TransactionDate
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONDATE ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONDATE, new SifDate( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;TransactionTime&gt;</c> element.
	/// </summary>
	/// <value> The <c>TransactionTime</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Time of transaction."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public DateTime? TransactionTime
	{
		get
		{
			return (DateTime?) GetSifSimpleFieldValue( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONTIME ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONTIME, new SifTime( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;TransactionTypes&gt;</c> element.
	/// </summary>
	/// <value> A TransactionTypes </value>
	/// <remarks>
	/// <para>To remove the <c>TransactionTypes</c>, set <c>TransactionTypes</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public TransactionTypes TransactionTypes
	{
		get
		{
			return (TransactionTypes)GetChild( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONTYPES);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONTYPES);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_TRANSACTIONTYPES, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Customer&gt;</c> element.</summary>
	/// <param name="SifRefId">GUID of the SIF customer type.</param>
	/// <param name="SifRefObject">SIF customer type. If the type is StaffPersonalRefId then EarnedStatus is included. If the type is StudentPersonalRefId, then MealStatus in included.</param>
	///<remarks>
	/// <para>This form of <c>setCustomer</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Customer</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetCustomer( string SifRefId, CustomerObjectName SifRefObject ) {
		RemoveChild( FoodDTD.FOODSERVICETRANSACTION_CUSTOMER);
		AddChild( FoodDTD.FOODSERVICETRANSACTION_CUSTOMER, new Customer( SifRefId, SifRefObject ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Customer&gt;</c> element.
	/// </summary>
	/// <value> A Customer </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "The customer doing the transaction. The customer can be student, staff or any other person."</para>
	/// <para>This null is known by more than one tag name depending on the version of SIF in use. 
	/// The ADK will use the tag names shown below when parsing and rendering nulls of this kind.</para>
	/// <list type="table"><listheader><term>Version</term><description>Tag</description></listheader>;
	/// <item><term>2.0 (and greater)</term><description>&lt;Customer&gt;</description></item>
	/// </list>
	/// <para>To remove the <c>Customer</c>, set <c>Customer</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public Customer Customer
	{
		get
		{
			return (Customer)GetChild( FoodDTD.FOODSERVICETRANSACTION_CUSTOMER);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_CUSTOMER);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_CUSTOMER, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;FSAmount&gt;</c> element.</summary>
	/// <param name="Type">
	///         Type of amount. The currency unit is implied; namely USD. Note that when this common element is used not all of the following values apply. There are notes to indicate values that are applicable.
	///       </param>
	/// <param name="Credits">
	///         Number of credits. This attribute does not apply to Cash or Value
	///         and hence has a value 0. It only applies to types BreakfastCredit and LunchCredit.
	///       </param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;FSAmount&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setFSAmount</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>FSAmount</c></para>
	/// <para>Version: 1.5r1</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetFSAmount( FSAmountType Type, decimal? Credits, decimal? Value ) {
		RemoveChild( FoodDTD.FOODSERVICETRANSACTION_FSAMOUNT);
		AddChild( FoodDTD.FOODSERVICETRANSACTION_FSAMOUNT, new FSAmount( Type, Credits, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;FSAmount&gt;</c> element.
	/// </summary>
	/// <value> A FSAmount </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Amount."</para>
	/// <para>To remove the <c>FSAmount</c>, set <c>FSAmount</c> to <c>null</c></para>
	/// <para>Version: 1.5r1</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public FSAmount FSAmount
	{
		get
		{
			return (FSAmount)GetChild( FoodDTD.FOODSERVICETRANSACTION_FSAMOUNT);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_FSAMOUNT);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_FSAMOUNT, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Amount&gt;</c> element.</summary>
	/// <param name="Type">
	///         Type of amount. The currency unit is implied; namely USD. Note that when this common element is used not all of the following values apply. There are notes to indicate values that are applicable.
	///       </param>
	/// <param name="Credits">
	///         Number of credits. This attribute does not apply to Cash or Value
	///         and hence has a value 0. It only applies to types BreakfastCredit and LunchCredit.
	///       </param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;FSAmount&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setAmount</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Amount</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetAmount( FSAmountType Type, decimal? Credits, decimal? Value ) {
		RemoveChild( FoodDTD.FOODSERVICETRANSACTION_AMOUNT);
		AddChild( FoodDTD.FOODSERVICETRANSACTION_AMOUNT, new FSAmount( Type, Credits, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Amount&gt;</c> element.
	/// </summary>
	/// <value> A FSAmount </value>
	/// <remarks>
	/// <para>To remove the <c>FSAmount</c>, set <c>Amount</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public FSAmount Amount
	{
		get
		{
			return (FSAmount)GetChild( FoodDTD.FOODSERVICETRANSACTION_AMOUNT);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_AMOUNT);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_AMOUNT, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Tax&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;MonetaryAmount&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setTax</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Tax</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetTax( decimal? Value ) {
		RemoveChild( FoodDTD.FOODSERVICETRANSACTION_TAX);
		AddChild( FoodDTD.FOODSERVICETRANSACTION_TAX, new MonetaryAmount( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Tax&gt;</c> element.
	/// </summary>
	/// <value> A MonetaryAmount </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Amount of tax."</para>
	/// <para>To remove the <c>MonetaryAmount</c>, set <c>Tax</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public MonetaryAmount Tax
	{
		get
		{
			return (MonetaryAmount)GetChild( FoodDTD.FOODSERVICETRANSACTION_TAX);
		}
		set
		{
			RemoveChild( FoodDTD.FOODSERVICETRANSACTION_TAX);
			if( value != null)
			{
				AddChild( FoodDTD.FOODSERVICETRANSACTION_TAX, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Description&gt;</c> element.
	/// </summary>
	/// <value> The <c>Description</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "Description of the Transaction"</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string Description
	{
		get
		{
			return (string) GetSifSimpleFieldValue( FoodDTD.FOODSERVICETRANSACTION_DESCRIPTION ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.FOODSERVICETRANSACTION_DESCRIPTION, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Voided&gt;</c> element.
	/// </summary>
	/// <value> The <c>Voided</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "This flag tells us if the transaction is voided."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public string Voided
	{
		get
		{ 
			return GetFieldValue( FoodDTD.FOODSERVICETRANSACTION_VOIDED );
		}
		set
		{
			SetField( FoodDTD.FOODSERVICETRANSACTION_VOIDED, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>&lt;Voided&gt;</c> element.
	/// </summary>
	/// <param name="val">A YesNo object</param>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "This flag tells us if the transaction is voided."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 1.5r1</para>
	/// </remarks>
	public void SetVoided( YesNo val )
	{
		SetField( FoodDTD.FOODSERVICETRANSACTION_VOIDED, val );
	}

}}
