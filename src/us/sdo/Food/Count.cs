// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.us.Common;

namespace OpenADK.Library.us.Food{

/// <summary>A Count</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.5</para>
/// <para>Since: 2.0</para>
/// </remarks>
[Serializable]
public class Count : SifKeyedElement
{
	/// <summary>
	/// Creates an instance of a Count
	/// </summary>
	public Count() : base ( FoodDTD.COUNT ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="value">The value of the count.</param>
	///
	public Count( decimal? value ) : base( FoodDTD.COUNT )
	{
		this.Value = value;
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected Count( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { FoodDTD.COUNT_VALUE }; }
	}

	///<summary>Sets the value of the <c>&lt;MealStatus&gt;</c> element.</summary>
	/// <param name="Type">Meal status type.</param>
	///<remarks>
	/// <para>This form of <c>setMealStatus</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>MealStatus</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetMealStatus( FreeReducedStatus Type ) {
		RemoveChild( FoodDTD.COUNT_MEALSTATUS);
		AddChild( FoodDTD.COUNT_MEALSTATUS, new MealStatus( Type ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;MealStatus&gt;</c> element.
	/// </summary>
	/// <value> A MealStatus </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Student meal status. If a meal status applies, either MealStatus (for students), or EarnedStatus (for staff) is specified."</para>
	/// <para>To remove the <c>MealStatus</c>, set <c>MealStatus</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public MealStatus MealStatus
	{
		get
		{
			return (MealStatus)GetChild( FoodDTD.COUNT_MEALSTATUS);
		}
		set
		{
			RemoveChild( FoodDTD.COUNT_MEALSTATUS);
			if( value != null)
			{
				AddChild( FoodDTD.COUNT_MEALSTATUS, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;EarnedStatus&gt;</c> element.</summary>
	/// <param name="Type">Earned status type.</param>
	///<remarks>
	/// <para>This form of <c>setEarnedStatus</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>EarnedStatus</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetEarnedStatus( YesNoNA Type ) {
		RemoveChild( FoodDTD.COUNT_EARNEDSTATUS);
		AddChild( FoodDTD.COUNT_EARNEDSTATUS, new EarnedStatus( Type ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;EarnedStatus&gt;</c> element.
	/// </summary>
	/// <value> An EarnedStatus </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Staff meal status."</para>
	/// <para>To remove the <c>EarnedStatus</c>, set <c>EarnedStatus</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public EarnedStatus EarnedStatus
	{
		get
		{
			return (EarnedStatus)GetChild( FoodDTD.COUNT_EARNEDSTATUS);
		}
		set
		{
			RemoveChild( FoodDTD.COUNT_EARNEDSTATUS);
			if( value != null)
			{
				AddChild( FoodDTD.COUNT_EARNEDSTATUS, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;MealType&gt;</c> element.
	/// </summary>
	/// <value> The <c>MealType</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public string MealType
	{
		get
		{ 
			return GetFieldValue( FoodDTD.COUNT_MEALTYPE );
		}
		set
		{
			SetField( FoodDTD.COUNT_MEALTYPE, value );
		}
	}

	/// <summary>
	/// Sets the value of the <c>&lt;MealType&gt;</c> element.
	/// </summary>
	/// <param name="val">A MealTypes object</param>
	/// <remarks>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetMealType( MealTypes val )
	{
		SetField( FoodDTD.COUNT_MEALTYPE, val );
	}

	///<summary>Sets the value of the <c>&lt;Amount&gt;</c> element.</summary>
	/// <param name="Type">
	///         Type of amount. The currency unit is implied; namely USD. Note that when this common element is used not all of the following values apply. There are notes to indicate values that are applicable.
	///       </param>
	/// <param name="Credits">
	///         Number of credits. This attribute does not apply to Cash or Value
	///         and hence has a value 0. It only applies to types BreakfastCredit and LunchCredit.
	///       </param>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;FSAmount&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setAmount</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Amount</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetAmount( FSAmountType Type, decimal? Credits, decimal? Value ) {
		RemoveChild( FoodDTD.COUNT_AMOUNT);
		AddChild( FoodDTD.COUNT_AMOUNT, new FSAmount( Type, Credits, Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Amount&gt;</c> element.
	/// </summary>
	/// <value> A FSAmount </value>
	/// <remarks>
	/// <para>To remove the <c>FSAmount</c>, set <c>Amount</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public FSAmount Amount
	{
		get
		{
			return (FSAmount)GetChild( FoodDTD.COUNT_AMOUNT);
		}
		set
		{
			RemoveChild( FoodDTD.COUNT_AMOUNT);
			if( value != null)
			{
				AddChild( FoodDTD.COUNT_AMOUNT, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;Tax&gt;</c> element.</summary>
	/// <param name="Value">Gets or sets the content value of the &amp;lt;MonetaryAmount&amp;gt; element</param>
	///<remarks>
	/// <para>This form of <c>setTax</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>Tax</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public void SetTax( decimal? Value ) {
		RemoveChild( FoodDTD.COUNT_TAX);
		AddChild( FoodDTD.COUNT_TAX, new MonetaryAmount( Value ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Tax&gt;</c> element.
	/// </summary>
	/// <value> A MonetaryAmount </value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this null as: "Dollar value of tax collected."</para>
	/// <para>To remove the <c>MonetaryAmount</c>, set <c>Tax</c> to <c>null</c></para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public MonetaryAmount Tax
	{
		get
		{
			return (MonetaryAmount)GetChild( FoodDTD.COUNT_TAX);
		}
		set
		{
			RemoveChild( FoodDTD.COUNT_TAX);
			if( value != null)
			{
				AddChild( FoodDTD.COUNT_TAX, value );
			}
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Value&gt;</c> element.
	/// </summary>
	/// <value> The <c>Value</c> element of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this element as: "The value of the count."</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	public decimal? Value
	{
		get
		{
			return (decimal?) GetSifSimpleFieldValue( FoodDTD.COUNT_VALUE ) ;
		}
		set
		{
			SetFieldValue( FoodDTD.COUNT_VALUE, new SifDecimal( value ), value );
		}
	}

}}
