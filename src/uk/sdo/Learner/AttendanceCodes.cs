// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using OpenADK.Library;

namespace OpenADK.Library.uk.Learner
{
	///<summary>
	/// Defines the set of values that can be specified whenever an AttendanceCodes
	/// is used as a parameter to a method or constructor. 
	///</summary>
	/// <remarks>
	/// Alternatively, the static
	///  <see cref="Wrap"/> method can be called to encapsulate any string value in
	///  an AttendanceCodes object.
	/// <para>Author: Generated by adkgen</para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.0</para>
	/// </remarks>
	[Serializable]
	public class AttendanceCodes : SifEnum
	{
	/// <summary>Authorised absence as pupil is absent due to other authorised circumstances ("C")</summary>
	public static readonly AttendanceCodes AUTHORISED_OTHER = new AttendanceCodes("C");

	/// <summary>Authorised absence due to agreed family holiday ("H")</summary>
	public static readonly AttendanceCodes AUTHORISED_FAMILY_HOLIDAY = new AttendanceCodes("H");

	/// <summary>Unauthorised absence as pupil is on a family holiday, not agreed, or is taking days in excess of an agreed family holiday ("G")</summary>
	public static readonly AttendanceCodes UNAUTHORISED_FAMILY_HOLIDAY = new AttendanceCodes("G");

	/// <summary>Non-compulsory school age absence - not counted in possible attendances ("X")</summary>
	public static readonly AttendanceCodes NON_COMPULSORY_ABSENCE = new AttendanceCodes("X");

	/// <summary>Approved education activity as pupil being educated off site (not dual registration) ("B")</summary>
	public static readonly AttendanceCodes APPROVED_OFFSITE = new AttendanceCodes("B");

	/// <summary>Present (AM) ("/")</summary>
	public static readonly AttendanceCodes PRESENT_AM = new AttendanceCodes("/");

	/// <summary>Approved education activity as pupil is attending an approved sporting activity ("P")</summary>
	public static readonly AttendanceCodes APPROVED_SPORTING = new AttendanceCodes("P");

	/// <summary>Approved education activity as pupil is attending interview ("J")</summary>
	public static readonly AttendanceCodes APPROVED_INTERVIEW = new AttendanceCodes("J");

	/// <summary>Enforced closure - not counted in possible attendances ("Y")</summary>
	public static readonly AttendanceCodes ENFORCED_CLOSURE = new AttendanceCodes("Y");

	/// <summary>Unauthorised absence as pupil missed sessions for an unauthorised absence not covered by any other code/description ("O")</summary>
	public static readonly AttendanceCodes UNAUTHORISED_ABSENCE = new AttendanceCodes("O");

	/// <summary>Present (PM) ("\\")</summary>
	public static readonly AttendanceCodes PRESENT_PM = new AttendanceCodes("\\");

	/// <summary>Authorised absence due to study leave ("S")</summary>
	public static readonly AttendanceCodes AUTHORISED_STUDY_LEAVE = new AttendanceCodes("S");

	/// <summary>Unauthorised absence as pupil arrived after registers closed ("U")</summary>
	public static readonly AttendanceCodes UNAUTHORISED_AFTER_REGISTERS_CLOSED = new AttendanceCodes("U");

	/// <summary>Approved education activity as pupil is attending work experience ("W")</summary>
	public static readonly AttendanceCodes APPROVED_WORK_EXP = new AttendanceCodes("W");

	/// <summary>Late (before registers closed) marked as present ("L")</summary>
	public static readonly AttendanceCodes LATE_BEFORE_REGISTERS_CLOSED = new AttendanceCodes("L");

	/// <summary>Authorised absence due to Illness (NOT medical or dental etc. appointments) ("I")</summary>
	public static readonly AttendanceCodes AUTHORISED_ILLNESS = new AttendanceCodes("I");

	/// <summary>Pupil not yet on roll - not counted in possible attendances ("Z")</summary>
	public static readonly AttendanceCodes PUPIL_NOT_ON_ROLL = new AttendanceCodes("Z");

	/// <summary>Authorised absence due to medical/ dental appointments ("M")</summary>
	public static readonly AttendanceCodes AUTHORISED_MEDICAL = new AttendanceCodes("M");

	/// <summary>Unauthorised absence as pupil missed sessions for a reason that has not yet been provided ("N")</summary>
	public static readonly AttendanceCodes UNAUTHORISED_NOT_PROVIDED = new AttendanceCodes("N");

	/// <summary>Authorised absence due to traveller absence ("T")</summary>
	public static readonly AttendanceCodes AUTHORISED_TRAVELLER = new AttendanceCodes("T");

	/// <summary>Authorised absence as pupil is excluded, with no alternative provision made ("E")</summary>
	public static readonly AttendanceCodes AUTHORISED_EXCLUDED = new AttendanceCodes("E");

	/// <summary>Approved education activity as pupil is dual registered (i.e. attending another establishment) ("D")</summary>
	public static readonly AttendanceCodes APPROVED_DUAL_REGISTERED = new AttendanceCodes("D");

	/// <summary>Authorised absence due to religious observance ("R")</summary>
	public static readonly AttendanceCodes AUTHORISED_RELIGIOUS = new AttendanceCodes("R");

	/// <summary>School closed to pupils - not counted in possible attendances ("#")</summary>
	public static readonly AttendanceCodes SCHOOL_CLOSED = new AttendanceCodes("#");

	/// <summary>Authorised absence due to agreed extended family holiday ("F")</summary>
	public static readonly AttendanceCodes AUTHORISED_EXT_FAMILY_HOLIDAY = new AttendanceCodes("F");

	/// <summary>Approved education activity as pupil is away on an educational visit or trip  ("V")</summary>
	public static readonly AttendanceCodes APPROVED_EDUCATIONAL_TRIP = new AttendanceCodes("V");

	///<summary>Wrap an arbitrary string value in an AttendanceCodes object.</summary>
	///<param name="wrappedValue">The element/attribute value.</param>
	///<remarks>This method does not verify
	///that the value is valid according to the SIF Specification</remarks>
	public static AttendanceCodes Wrap( String wrappedValue ) {
		return new AttendanceCodes( wrappedValue );
	}

	private AttendanceCodes( string enumDefValue ) : base( enumDefValue ) {}
	}
}
