// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using OpenADK.Library;

namespace OpenADK.Library.uk.Learner
{
	///<summary>
	/// Defines the set of values that can be specified whenever an AttendanceCodeType
	/// is used as a parameter to a method or constructor. 
	///</summary>
	/// <remarks>
	/// Alternatively, the static
	///  <see cref="Wrap"/> method can be called to encapsulate any string value in
	///  an AttendanceCodeType object.
	/// <para>Author: Generated by adkgen</para>
	/// <para>Version: 2.5</para>
	/// <para>Since: 2.1</para>
	/// </remarks>
	[Serializable]
	public class AttendanceCodeType : SifEnum
	{
	/// <summary>Authorised absence as pupil is absent due to other authorised circumstances ("C")</summary>
	public static readonly AttendanceCodeType AUTHORISED_OTHER = new AttendanceCodeType("C");

	/// <summary>Authorised absence due to agreed family holiday ("H")</summary>
	public static readonly AttendanceCodeType AUTHORISED_FAMILY_HOLIDAY = new AttendanceCodeType("H");

	/// <summary>Unauthorised absence as pupil is on a family holiday, not agreed, or is taking days in excess of an agreed family holiday ("G")</summary>
	public static readonly AttendanceCodeType UNAUTHORISED_FAMILY_HOLIDAY = new AttendanceCodeType("G");

	/// <summary>Non-compulsory school age absence - not counted in possible attendances ("X")</summary>
	public static readonly AttendanceCodeType NON_COMPULSORY_ABSENCE = new AttendanceCodeType("X");

	/// <summary>Approved education activity as pupil being educated off site (not dual registration) ("B")</summary>
	public static readonly AttendanceCodeType APPROVED_OFFSITE = new AttendanceCodeType("B");

	/// <summary>Present (AM) ("/")</summary>
	public static readonly AttendanceCodeType PRESENT_AM = new AttendanceCodeType("/");

	/// <summary>Approved education activity as pupil is attending an approved sporting activity ("P")</summary>
	public static readonly AttendanceCodeType APPROVED_SPORTING = new AttendanceCodeType("P");

	/// <summary>Approved education activity as pupil is attending interview ("J")</summary>
	public static readonly AttendanceCodeType APPROVED_INTERVIEW = new AttendanceCodeType("J");

	/// <summary>Enforced closure - not counted in possible attendances ("Y")</summary>
	public static readonly AttendanceCodeType ENFORCED_CLOSURE = new AttendanceCodeType("Y");

	/// <summary>Unauthorised absence as pupil missed sessions for an unauthorised absence not covered by any other code/description ("O")</summary>
	public static readonly AttendanceCodeType UNAUTHORISED_ABSENCE = new AttendanceCodeType("O");

	/// <summary>Present (PM) ("\\")</summary>
	public static readonly AttendanceCodeType PRESENT_PM = new AttendanceCodeType("\\");

	/// <summary>Authorised absence due to study leave ("S")</summary>
	public static readonly AttendanceCodeType AUTHORISED_STUDY_LEAVE = new AttendanceCodeType("S");

	/// <summary>Unauthorised absence as pupil arrived after registers closed ("U")</summary>
	public static readonly AttendanceCodeType UNAUTHORISED_AFTER_REGISTERS_CLOSED = new AttendanceCodeType("U");

	/// <summary>Approved education activity as pupil is attending work experience ("W")</summary>
	public static readonly AttendanceCodeType APPROVED_WORK_EXP = new AttendanceCodeType("W");

	/// <summary>Late (before registers closed) marked as present ("L")</summary>
	public static readonly AttendanceCodeType LATE_BEFORE_REGISTERS_CLOSED = new AttendanceCodeType("L");

	/// <summary>Authorised absence due to Illness (NOT medical or dental etc. appointments) ("I")</summary>
	public static readonly AttendanceCodeType AUTHORISED_ILLNESS = new AttendanceCodeType("I");

	/// <summary>Pupil not yet on roll - not counted in possible attendances ("Z")</summary>
	public static readonly AttendanceCodeType PUPIL_NOT_ON_ROLL = new AttendanceCodeType("Z");

	/// <summary>Authorised absence due to medical/ dental appointments ("M")</summary>
	public static readonly AttendanceCodeType AUTHORISED_MEDICAL = new AttendanceCodeType("M");

	/// <summary>Unauthorised absence as pupil missed sessions for a reason that has not yet been provided ("N")</summary>
	public static readonly AttendanceCodeType UNAUTHORISED_NOT_PROVIDED = new AttendanceCodeType("N");

	/// <summary>Authorised absence due to traveller absence ("T")</summary>
	public static readonly AttendanceCodeType AUTHORISED_TRAVELLER = new AttendanceCodeType("T");

	/// <summary>Authorised absence as pupil is excluded, with no alternative provision made ("E")</summary>
	public static readonly AttendanceCodeType AUTHORISED_EXCLUDED = new AttendanceCodeType("E");

	/// <summary>Approved education activity as pupil is dual registered (i.e. attending another establishment) ("D")</summary>
	public static readonly AttendanceCodeType APPROVED_DUAL_REGISTERED = new AttendanceCodeType("D");

	/// <summary>Authorised absence due to religious observance ("R")</summary>
	public static readonly AttendanceCodeType AUTHORISED_RELIGIOUS = new AttendanceCodeType("R");

	/// <summary>School closed to pupils - not counted in possible attendances ("#")</summary>
	public static readonly AttendanceCodeType SCHOOL_CLOSED = new AttendanceCodeType("#");

	/// <summary>Authorised absence due to agreed extended family holiday ("F")</summary>
	public static readonly AttendanceCodeType AUTHORISED_EXT_FAMILY_HOLIDAY = new AttendanceCodeType("F");

	/// <summary>Approved education activity as pupil is away on an educational visit or trip  ("V")</summary>
	public static readonly AttendanceCodeType APPROVED_EDUCATIONAL_TRIP = new AttendanceCodeType("V");

	///<summary>Wrap an arbitrary string value in an AttendanceCodeType object.</summary>
	///<param name="wrappedValue">The element/attribute value.</param>
	///<remarks>This method does not verify
	///that the value is valid according to the SIF Specification</remarks>
	public static AttendanceCodeType Wrap( String wrappedValue ) {
		return new AttendanceCodeType( wrappedValue );
	}

	private AttendanceCodeType( string enumDefValue ) : base( enumDefValue ) {}
	}
}
