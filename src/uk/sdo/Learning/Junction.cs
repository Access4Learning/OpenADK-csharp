// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

using System;
using System.Text;
using System.Security.Permissions;
using System.Runtime.Serialization;
using OpenADK.Library;
using OpenADK.Library.Global;
using OpenADK.Library.uk.Common;

namespace OpenADK.Library.uk.Learning{

/// <summary>A Junction</summary>
/// <remarks>
///
/// <para>Author: Generated by adkgen</para>
/// <para>Version: 2.6</para>
/// <para>Since: 2.3</para>
/// </remarks>
[Serializable]
public class Junction : SifDataObject
{
	/// <summary>
	/// Creates an instance of a Junction
	/// </summary>
	public Junction() : base( Adk.SifVersion, LearningDTD.JUNCTION ){}

	/// <summary>
	/// Constructor that accepts values for all mandatory fields
	/// </summary>
	///<param name="refId">A unique local identifier for this junction</param>
	///<param name="label">A Label</param>
	///<param name="shortLabel">A ShortLabel</param>
	///<param name="inputList">An InputList</param>
	///<param name="outputList">An OutputList</param>
	///
	public Junction( string refId, string label, string shortLabel, Input inputList, Output outputList ) : base( Adk.SifVersion, LearningDTD.JUNCTION )
	{
		this.RefId = refId;
		this.Label = label;
		this.ShortLabel = shortLabel;
		this.InputList =  new InputList( inputList );
		this.OutputList =  new OutputList( outputList );
	}

	/// <summary>
	/// Constructor used by the .Net Serialization formatter
	/// </summary>
	[SecurityPermission( SecurityAction.Demand, SerializationFormatter=true )] 
	protected Junction( SerializationInfo info, StreamingContext context ) : base( info, context ) {} 
	/// <summary>
	/// Gets the metadata fields that make up the key of this object
	/// </summary>
	/// <value>
	/// an array of metadata fields that make up the object's key
	/// </value>
	public override IElementDef[] KeyFields {
		get { return new IElementDef[] { LearningDTD.JUNCTION_REFID }; }
	}

	/// <summary>
	/// Gets or sets the value of the <c>RefId</c> attribute.
	/// </summary>
	/// <value> The <c>RefId</c> attribute of this object.</value>
	/// <remarks>
	/// <para>The SIF specification defines the meaning of this attribute as: "A unique local identifier for this junction"</para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public override string RefId
	{
		get
		{
			return (string) GetSifSimpleFieldValue( LearningDTD.JUNCTION_REFID ) ;
		}
		set
		{
			SetFieldValue( LearningDTD.JUNCTION_REFID, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;Label&gt;</c> element.
	/// </summary>
	/// <value> The <c>Label</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public string Label
	{
		get
		{
			return (string) GetSifSimpleFieldValue( LearningDTD.JUNCTION_LABEL ) ;
		}
		set
		{
			SetFieldValue( LearningDTD.JUNCTION_LABEL, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;ShortLabel&gt;</c> element.
	/// </summary>
	/// <value> The <c>ShortLabel</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public string ShortLabel
	{
		get
		{
			return (string) GetSifSimpleFieldValue( LearningDTD.JUNCTION_SHORTLABEL ) ;
		}
		set
		{
			SetFieldValue( LearningDTD.JUNCTION_SHORTLABEL, new SifString( value ), value );
		}
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;LocalType&gt;</c> element.
	/// </summary>
	/// <value> The <c>LocalType</c> element of this object.</value>
	/// <remarks>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public string LocalType
	{
		get
		{
			return (string) GetSifSimpleFieldValue( LearningDTD.JUNCTION_LOCALTYPE ) ;
		}
		set
		{
			SetFieldValue( LearningDTD.JUNCTION_LOCALTYPE, new SifString( value ), value );
		}
	}

	///<summary>Sets the value of the <c>&lt;InputList&gt;</c> element.</summary>
	/// <param name="Input">An Input</param>
	///<remarks>
	/// <para>This form of <c>setInputList</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>InputList</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public void SetInputList( Input Input ) {
		RemoveChild( LearningDTD.JUNCTION_INPUTLIST);
		AddChild( LearningDTD.JUNCTION_INPUTLIST, new InputList( Input ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;InputList&gt;</c> element.
	/// </summary>
	/// <value> An InputList </value>
	/// <remarks>
	/// <para>To remove the <c>InputList</c>, set <c>InputList</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public InputList InputList
	{
		get
		{
			return (InputList)GetChild( LearningDTD.JUNCTION_INPUTLIST);
		}
		set
		{
			RemoveChild( LearningDTD.JUNCTION_INPUTLIST);
			if( value != null)
			{
				AddChild( LearningDTD.JUNCTION_INPUTLIST, value );
			}
		}
	}

	///<summary>Sets the value of the <c>&lt;OutputList&gt;</c> element.</summary>
	/// <param name="Output">An Output</param>
	///<remarks>
	/// <para>This form of <c>setOutputList</c> is provided as a convenience method
	/// that is functionally equivalent to the <c>OutputList</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public void SetOutputList( Output Output ) {
		RemoveChild( LearningDTD.JUNCTION_OUTPUTLIST);
		AddChild( LearningDTD.JUNCTION_OUTPUTLIST, new OutputList( Output ) );
	}

	/// <summary>
	/// Gets or sets the value of the <c>&lt;OutputList&gt;</c> element.
	/// </summary>
	/// <value> An OutputList </value>
	/// <remarks>
	/// <para>To remove the <c>OutputList</c>, set <c>OutputList</c> to <c>null</c></para>
	/// <para>Version: 2.6</para>
	/// <para>Since: 2.3</para>
	/// </remarks>
	public OutputList OutputList
	{
		get
		{
			return (OutputList)GetChild( LearningDTD.JUNCTION_OUTPUTLIST);
		}
		set
		{
			RemoveChild( LearningDTD.JUNCTION_OUTPUTLIST);
			if( value != null)
			{
				AddChild( LearningDTD.JUNCTION_OUTPUTLIST, value );
			}
		}
	}

}}
