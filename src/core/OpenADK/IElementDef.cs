//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s). 
// All rights reserved.
//

using System.Collections.Generic;

namespace OpenADK.Library
{
    /// <summary>Encapsulates metadata for a SIF element or attribute.</summary>
    /// <remarks>
    /// <para>The ElementDef interface is fundamental to programming with the ADK. It's
    /// primarily used internally for parsing and rendering of SIF Data Objects across
    /// all versions of the SIF Specification, but is also used by in ADK programming to 
    /// uniquely identify SIF Data Objects, elements, and attributes.</para>
    /// <para>An instance of IElementDef captures the following characteristics of each XML 
    /// element and attribute in the SIF data model:
    /// <list type="bullet">
    ///	<item><term>The internal ADK name of the element/attribute</term></item>
    ///	<item><term>The version-dependent tag name of the element/attribute</term></item>
    ///	<item><term>The first version of SIF the element/attribute appears in</term></item>
    ///	<item><term>The version-dependent sequence number of the element/attribute</term></item>
    ///	<item><term>Flags, such as whether an element is repeatable</term></item>
    ///	</list>
    ///</para>
    /// </remarks>
    /// <author>  Eric Petersen
    /// </author>
    /// <version>  1.0
    /// </version>
    public interface IElementDef
    {
        /// <summary>  Constructs a path to this IElementDef object, comprised of the names of
        /// its ancestry delimited by an underscore. The path can be used to lookup
        /// an IElementDef object via the <see cref="SifDtd.LookupElementDef"/> method.
        /// Note the strings used in the path generated by this method are not
        /// necessarily the same as the element or attribute tag names used in SIF
        /// XML messages. Rather, they are version-independent names typically equal
        /// to the tag name of the element in SIF 1.0r1.
        /// </summary>
        /// <returns> A path string (e.g. "StudentPersonal_RefId")
        /// </returns>
        string SDOPath { get; }

        /// <summary>  Gets the parent metadata object, or null if this metadata describes
        /// a root-level SIF Data Object element
        /// </summary>
        /// <returns> The parent metadata object
        /// </returns>
        IElementDef Parent { get; }

        /// <summary>  Gets the root metadata object</summary>
        /// <returns> The root metadata object
        /// </returns>
        IElementDef Root { get; }

        /// <summary>  The name of the class that encapsulates elements of this type.</summary>
        /// <returns> The implementation class name excluding package information
        /// </returns>
        /// <seealso cref="FQClassName">
        /// </seealso>
        string ClassName { get; }

        /// <summary>  Gets the fully-qualified class name of the class that encapsulates
        /// elements of this type.
        /// </summary>
        /// <returns> The implementation class name including package information
        /// </returns>
        /// <seealso cref="ClassName">
        /// </seealso>
        /// <seealso cref="Package">
        /// </seealso>
        string FQClassName { get; }

        /// <summary>  Gets the namespace of the class that encapsulates elements of this type.</summary>
        /// <returns> The package where the implementation class is found
        /// </returns>
        /// <seealso cref="FQClassName">
        /// </seealso>
        string Package { get; }

        /// <summary>  Determines if this metadata describes an XML attribute</summary>
        /// <returns> true if this metadata describes an XML attribute
        /// </returns>
        bool IsAttribute( SifVersion version );

        /// <summary>
        /// Determines if this element should not be written in this version of SIF, but that rather
        /// it's children should be written in it's place. This is helpful for cases where a set of 
        /// elements valid for one version of SIF were moved inside of a new container element in
        /// a subsequent version (e.g. StudentPersonal/Email )
        /// </summary>
        /// <param name="version"></param>
        /// <returns></returns>
        bool IsCollapsed( SifVersion version );

        /// <summary>  Determines if this metadata describes a SIF <i>field</i>; that is, an
        /// element that has no children
        /// </summary>
        bool Field { get; }

        /// <summary>  Determines if this metadata describes a root-level SIF Data Object</summary>
        bool Object { get; }

        /// <summary>  Gets the earliest version of SIF that supports the element or attribute
        /// described by this metadata
        /// </summary>
        SifVersion EarliestVersion { get; }

        /// <summary>  Gets the latest version of SIF that supports the element or attribute
        /// described by this metadata
        /// </summary>
        SifVersion LatestVersion { get; }

        /// <summary>  Gets the version-independent name of this element or attribute. To get
        /// the actual tag name, which is SIF version-dependent, call the <c>tag</c>
        /// method.
        /// 
        /// </summary>
        /// <value> The version-independent name, which is usually equal to the
        /// element or attribute name in SIF 1.0r1, the first version of the
        /// SIF Specification supported by the Sdo framework
        /// </value>
        /// <seealso cref="Tag">
        /// </seealso>
        string Name { get; }

        /// <summary>  Gets the tag name</summary>
        /// <param name="version">Identifies the version of SIF to return the tag name for
        /// </param>
        /// <returns> The element tag or attribute name specific to this version of SIF
        /// </returns>
        string Tag( SifVersion version );

        /// <summary>  Gets the sequence number</summary>
        /// <param name="version">Identifies the version of SIF to return the sequence number for
        /// </param>
        /// <returns> The element sequence number for this version of SIF
        /// </returns>
        int GetSequence( SifVersion version );

        /// <summary>  Constructs a path to this element/attribute in the SIF Query Pattern
        /// format. The path is comprised of element tag and attribute names, which
        /// are dependent on the version of SIF specified. The root-level SIF Data
        /// Object element is excluded from the path.
        /// 
        /// </summary>
        /// <param name="version">Identifies the version of SIF to return the path for
        /// </param>
        /// <returns> A path to this element/attribute (e.g. "@RefId", "Email/@Type", etc.)
        /// </returns>
        string GetSQPPath( SifVersion version );

        /// <summary>
        /// Returns true if the element referenced has simple content
        /// </summary>
        bool HasSimpleContent { get; }

        /// <summary>
        ///  Determines if this metadata describes an element that is contained in the
        ///  specified version of SIF.
        /// </summary>
        /// <param name="version">The version of the SIF Specification</param>
        /// <returns> <c>TRUE</c> if the metadata is included in the specified version of SIF</returns>
        bool IsSupported( SifVersion version );

        /// <summary>  Determines if this metadata describes a deprecated element or attribute
        /// in this version of SIF
        /// </summary>
        bool IsDeprecated( SifVersion version );

        /// <summary>  Determines if this metadata describes a repeatable element in this version of SIF</summary>
        bool IsRepeatable( SifVersion version );

        /// <summary>
        /// 	Determines if the content of this element can be automatically encoded
        /// 	when written to an output stream by the SIFWriter class when automatic
        /// 	encoding is enabled (the default behavior in ADK 1.5.1.0 and later). 
        /// 	Encoding converts all invalid XML characters to valid XML entities. 
        /// 	Some elements contain XML content and should not be encoded.
        /// </summary>
        bool DoNotEncode { get; }

        /// <summary>  Add a version-specific definition of the tag to this IElementDef.
        /// 
        /// </summary>
        /// <param name="version">A SifVersion constant (other than SIF10r1, which is
        /// implicitly defined by all IElementDef class constructors)
        /// </param>
        /// <param name="tag">The element tag name for this version of SIF
        /// </param>
        /// <param name="sequence">The sequence number for this version of SIF
        /// </param>
        /// <param name="flags">One or more flags such as <c>FD_DEPRECATED</c>
        /// </param>
        void DefineVersionInfo( SifVersion version,
                                string tag,
                                int sequence,
                                int flags );

        /// <summary>
        /// The Type converter suitable for parsing the SIF XML value of this element into
        /// the native data type
        /// </summary>
        TypeConverter TypeConverter { get; }

        /// <summary>
        /// Gets version-specific information for this element
        /// </summary>
        /// <param name="version">Identifies the version of SIF to return the version-
        /// specific information for</param>
        /// <returns></returns>
        IElementVersionInfo GetVersionInfo( SifVersion version );

        /// <summary>
        /// Gets all of the metadata objects defined as children of this metadata element
        /// </summary>
        IList<IElementDef> Children { get; }
    }
}
